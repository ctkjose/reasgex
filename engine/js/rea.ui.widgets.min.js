var ui_widgets = {
	expanders: [],
	createInstanceForElement: function(widgetName, o){
		var a = this[name].instanceWithElement(o);
		return a;
	},
	registerWidgets : function(){
		var keys = Object.keys(this);
		
		
		for(var i=0;i<keys.length;i++){
			var k = keys[i];
			var o = this[k];
			if(!(o instanceof ui_widget)) continue;
			if(!o.hasOwnProperty("register")) continue;
			var m = o.register();
		
			if(!m.hasOwnProperty("provide-expand")) m["provide-expand"] = [];
			if(!m.hasOwnProperty("privide-data")) m["privide-data"] = [];
			if(!m.hasOwnProperty("expand-needs")) m["expand-needs"] = null;
			
			o.behavior = m;
			
			if( m["provide-expand"].length > 0){
				this.expanders.push( {"obj": k, "selectors": m["provide-expand"], "need":m["expand-needs"] } );
			}
		}
		
		var el = [];
		var c = this.expanders.length-1;
		for(var i=0;i<=c;i++){
			var e = this.expanders[i];
			console.log("checking[" + i + "]=" + e.obj + "============");
			if(!Array.isArray(e.need)){
				console.log("keep[" + i + "]=" + e.obj + "");
				el.push(e.obj);
				continue;
			}
			
			ok = true;
			for(var j=0;j<e.need.length;j++){
				if(el.indexOf(e.need[j]) < 0){
					ok = false;
					if(i == c) break;
					this.expanders.splice(i, 1);
					this.expanders.push(e);
					console.log("push back[" + i + "]=" + e.obj + ", missing [" + e.need[j] + "]");
					i--;
					break;
				}
			}
			
			if((i==c) && !ok) {
				console.log("skip[" + i + "]=" + e.obj + " missing dependencies");
			}
			if(ok) el.push(e.obj);
			if(ok) console.log("keep[" + i + "]=" + e.obj + "");
		}
	},
	expandDefaults : function(){
			
		var defaults = [".extend"];
		for(var i in defaults){
			this.expandForSelector(defaults[i]);	
		}
	},
	expandForSelector : function(selector){
		var o = (typeof selector == "string") ? $(selector) : selector;
		
		if(!o || (o.length <= 0)) return;
		
		if(o.hasClass("extended")) return;
		
		if(!o.hasClass("view")) o.addClass("view");
		if(o.hasClass("extend")) o.removeClass("extend");
		
		o.addClass("extended");
		
		for(var i=0;i<this.expanders.length;i++){
			var def = this.expanders[i];
			console.log(def);
			for(j=0;j<def.selectors.length;j++){
				var sel = def.selectors[j];
				o.find(sel).each(function(){
					var o = $( this );
					ui_widgets[def.obj].expandElement(o);
				});
			}
		}
	}
	
};

var ui_widget = function(type) {
	
	
	this.type = type;
	this.o = undefined;
	this.target = undefined;
	
	return this;
}
ui_widget.prototype.instance = function(){
	console.log("@instance");
	var a = new ui_widget(this.type);
	
	a.type = this.type;
	a.o = undefined;
	a.target = undefined;
	
	var keys = Object.keys(this);
	for(var i=0;i<keys.length;i++){
		var k = keys[i];
		if(a.hasOwnProperty(k)) continue;
		a[k] = this[k];
	}
	
	return a;
};
ui_widget.prototype.instanceWithElement = function(o){
	var a = this.instance();
	a.initWithElement(o);
	return a;
}
ui_widget.prototype.initWithElement = function(o){
	this.init(o);	
}
ui_widget.prototype.init = function(o){
	if( o instanceof jQuery ){
		this.o = o;
	}else{
		this.o = $(o);
	}
	
	
	console.log("@ui_widget." + this.type + ".init()");
}
ui_widget.prototype.installEvents = function(){
	var $this = this;
	this.o.on("change", function(e){
		$this.broadcast("change", e, []);
	});

	this.o.on("click touchend", function(e){
		$this.broadcast("click", e, []);
	});
	this.o.on("blur", function(e){
		$this.broadcast("blur", e, []);
	});
	this.o.on("focus", function(e){
		$this.broadcast("focus", e, []);
	});
};
ui_widget.prototype.broadcast = function(evt, e, args){
	
	var n = this.o.elmName();
	var msg = {"event_name": evt, "name" : n, "widget": this, "event": e };
	
	var action = n + "_" + evt;
	rea_controller.dispatchEvent(action, msg );
}
ui_widget.prototype.triggerChange = function(){
	this.broadcast("change", null,{});
}
ui_widget.prototype.triggerFocus = function(){
	this.broadcast("focus", null,{});
}


///@ui_date

ui_widgets.ui_date = new ui_widget("ui_date");
ui_widgets.ui_date.initWithElement = function(o){
	this.init(o);
};

ui_widgets.ui_date.setAttr = function(a, v){
	
	if(a == "ro"){
		if(v=="1"){
			this.o.attr("disabled", "disabled");
		}else if(this.o.attr("disabled")){
			this.o.removeAttr("disabled");
		}
	}
	if(a == "title"){
		this.o.elmKey("o-title", v);
		if(!this.o.attr("title")) this.o.attr("title", v);
	}
	if(a == "placeholder"){
		this.o.attr("placeholder", v);	
	}
}
ui_widgets.ui_date.getValue = function(){
	
	var v = this.o.val();
	var d = rea.types.date.create(v);
	var val = {};
	var n = this.o.elmName();
	
	if(v.length > 0) {
		val["multiple"] = true;
		val["record_type"] = "date";
		val["value"] = d.dateToHumanString();
		val["utc"] = d.toUTCString();
		val["iso"] = d.toISOString();
		val["json"] = d.toJSON();
		val["epoch"] = d.epoch();
		val["mysql"] = d.toMYSQLDateTime();
	
	}else{
		val = null;
	}
	
	return val;
}
ui_widgets.ui_date.setValue = function(value){
	
	var v = '';
	var ty = (typeof value);
	
	if( (ty == "string") ) {
		v = value;
	}
	var d = null;
	
	if( value instanceof Date){
		d = value;
	}else if(typeof value == "string"){
		d = rea.types.date.create(value);
	}
	
	if(!d) return;

	v = (d.getMonth()+1) + '/' + d.getDate() + '/' + d.getFullYear();
	this.o.attr("title", this.o.data("o-title") + "; Value " + v);
	
	this.o.elmKey("date", v);
	
	this.o.val(value);
}

ui_widgets.ui_date.register = function(){
	return {
		"provide-expand": [".date"],
		"privide-data": true,
		"expand-needs": ["ui_table"],
	};
}
ui_widgets.ui_date.expandElement = function(o){
	var n = o.attr("name");
	var scope = "default";
	if( o.attr("scope") ) { scope = o.attr("scope"); o.removeAttr("scope"); }
		
	if (o.attr('data-calendar')) {
		//t.attr("maxlength", 14);	
	}
	
	if (o.attr('class')) {
		data_class = o.attr('class');
	}
	
	var d = o;
	var t = o;
				
	if (!o.attr('placeholder')) o.attr('placeholder', 'M/D/YYYY');
	if (!o.attr('title')) o.attr('title', o.attr('placeholder'));
	o.elmKey("o-title", o.attr('title'));
	o.attr("extended", 1);
	
	t.addClass("uiw").addClass("ui_date").addClass("field");
	t.elmKey("uiw", "ui_date");
	
	if(o.hasClass("without-calendar")){
		
	}else{
		var d = $('<div class="input-group ui_date_frame" name="' + n + '_frame">');
		d.css({"max-width": "200px"});
		
		var bttn = $('<span class="input-group-addon cmd-ui-cal-show" data-field1="' + n + '"><i class="fa fa-calendar"></i></span>');
		t = o.clone();
		
		d.addClass("input-group");
		d.append(t);
		d.append(bttn);
		
		o.replaceWith( d );
	}
	
	//client_interactions.installEvents(n, t);	
}
///@ui_masked_text

ui_widgets.ui_masked_text = new ui_widget("ui_masked_text");	
ui_widgets.ui_masked_text.initWithElement = function(o){
	this.init(o);
	this.buffer = "";
	
	var $this = this;
	var t = this.o.find(".edit-area");
	
	
	
};
ui_widgets.ui_masked_text.getValue = function(){
	if( this.o.attr('data-ignore') && (this.o.data('ignore')=='1')) return null;
	
	var out = [""];
	var s = "";
	this.o.find("span").each(function(){
		var e = $(this);
		var v = e.html();
		
		s += v;
		if(e.hasClass(".edit-area")){
			out.push(v);
		}
	});
	
	out[0] = s;
	return out;
}
ui_widgets.ui_masked_text.setValue = function(value){
	this.o.val(value);
	
	var i = -1;
	if(typeof value == "string"){
		this.o.find(".edit-area").each(function(){
			i++;
			if(i==0) $(this).html(value);
		});
		return;
	}
	if(Array.isArray(value)){
		this.o.find(".edit-area").each(function(){
			i++;
			if(i >= value.length) return;
			if(!(i in value)) return;
			$(this).html(value[i]);
		});
	}
}
ui_widgets.ui_masked_text.setAttr = function(a, v){
	
	if(a == "ro"){
		var s = (v=="1") ? true : false;
		this.o.find(".edit-area").each(function(){
			if(s){
				$(this).addClass("disabled");
			}else{
				$(this).removeClass("disabled");
			}
		});
	}
	if(a == "text-sizes"){
		var text_sizes = v.split(","); var sr = -1;
		this.o.find(".edit-area").each(function(){
			sr++;
			if(typeof text_sizes[sr] !== "undefined"){
				$(this).css({"min-width":text_sizes[sr]});
			}
		});
	}
	
	if(a == "title"){
		this.o.elmKey("o-title", v);	
	}
	if(a == "placeholder"){
		this.o.attr("placeholder", v);	
	}
}
ui_widgets.ui_masked_text.buildComponents = function(src){
	var m = null;
	var r = /\{([A-Za-z0-9_\.\/\$\:\,\-\@\*\ \[\]\#\+]*)\}/mg;
	var comp = [];
	
	var $this = this;
	$this.matching = false;
	$this.selection = null;
	
	var text_sizes = [];
	if(this.o.attr("text-sizes")){
		var s = this.o.attr("text-sizes");
		text_sizes = s.split(",");
	}
	
	var sr = -1;
	while ((m = r.exec(src)) !== null) {
		
		var s = m[1];
		var e = {"t":"fixed", "s" : s, "r":""};
		var span = "";
		
		
		if(s.indexOf("[") === 0){
			var n = /\[[\<\>]*([A-Za-z0-9_\.\/\$\:\,\-\@\*\ \#\+]*)\]/.exec(s);
			if(n){
				e.t = "edit"; e.s = "";
				e.r = n[0];
			}
			
			s = "<span class=\"edit-area\" contenteditable=\"true\"></span>";
			var span =$(s);
			span.attr("name", "edit-area-" + this.o.attr("name"));
			span.data("mask", e.r);
			
			sr++;
			
			if(typeof text_sizes[sr] !== "undefined"){
				span.css({"min-width":text_sizes[sr]});
			}
			
			span.data("mask", e.r);
			span.on('change', function(event) {
				var t = $(this);
				
				$this.broadcast("change", event, []);
			});
			span.on("click touchend", function(e){
				$this.broadcast("click", e, []);
			}).on("focus", function(e){
				$this.broadcast("focus", e, []);
			});
			
			this.o.append(span);
			
			ui_support.CreateMasked(span);
			
		}else{
			s = rea.types.strings.getSafeHTML(e.s);
			s = "<span class=\"edit-fixed\">" + s + "</span>";
			var span =$(s);
			this.o.append(span);
		}
		
		
	}
	
	
};

ui_widgets.ui_masked_text.register = function(){
	return {
		"provide-expand": [".masked-text"],
		"privide-data": true,
		"expand-needs": ["ui_table"],
	};
}
ui_widgets.ui_masked_text.expandElement = function(o){
	var n = o.attr("name");

	var scope = "default";
	if( o.attr("scope") ) { scope = o.attr("scope"); o.removeAttr("scope"); }

	var v = "";
	
	if (o.attr("default")) {
		v = o.attr("default");
	}

	o.addClass("uiw").addClass("field");
	o.addClass("ui_masked_text");
	o.elmKey("uiw", "ui_masked_text");
	o.attr("extended", 1);
	
	if(scope != "default") o.elmKey("scope", scope);
	
	var widget =  ui_widgets.ui_masked_text.instanceWithElement(o);
	if(o.attr("mask")){
		widget.buildComponents(o.attr("mask"));
	}
}///@ui_options

ui_widgets.ui_options = new ui_widget("ui_options");
ui_widgets.ui_options.initWithElement = function(o){
	this.init(o);	
	
	
}
ui_widgets.ui_options.setAttr = function(a, v){
	
	if(a == "ro"){
		if(v == "1"){
			this.o.addClass("disabled");
		}else{
			this.o.removeClass("disabled");
		}
	}
	if(a == "title"){
		this.o.elmKey("o-title", v);
		this.o.attr("title", v);
	}
	if(a == "placeholder"){
		this.o.attr("placeholder", v);	
	}
}
ui_widgets.ui_options.getValue = function(){
	var v = this.o.elmKey("value");
	if(!v || (typeof v != "string")) return [];
	return v.split(",");
}
ui_widgets.ui_options.setValue = function(value){
	
	var v = [];
	if( Array.isArray(value) ){
		v = value;
	}else if(typeof value == "string"){
		v = value.split(",");
	}
	
	var out = [];
	var mc = 9999; var mi = 0;
	if(this.o.attr("max-options")) mc = this.o.attr("max-options");
	this.o.find(".edit-option").each(function(){
		var op = $(this);
		
		var opv = op.attr("value");
		if((v.indexOf(opv) >= 0) && (mi < mc)){
			mi++;
			op.addClass("active");
			out.push(opv);
		}else{
			op.removeClass("active");
		}
	});
	
	this.o.elmKey("value", out.join(","));
}
ui_widgets.ui_options.register = function(){
	return {
		"provide-expand": ["div.options"],
		"privide-data": true,
		"expand-needs": ["ui_table"],
	};
}
ui_widgets.ui_options.expandElement = function(o){
	var v = "";
	var n = o.elmName();
	
	var scope = "default";
	if( o.attr("scope") ) { scope = o.attr("scope"); o.removeAttr("scope"); }
	
	if (o.attr("default")) {
		v = o.attr("default");
	}
	
	o.attr("extended", 1);
	o.addClass("field").addClass("ui_options").addClass("uiw");
	o.elmKey("uiw", "ui_options");
	
	var tz = '0';
	if(v == "1"){
		o.addClass("active");
		tz = '44';
	}
	
	o.elmKey("value", v);
	
	var options = {};
	if (o.attr("options")) {
		var ops = JSON.parse(o.attr("options"));
		for (var k in ops) {
			options[k] = ops[k];
		}
	}else if (o.hasClass("yesno")) {
		options = { "0":"No", "1": "Yes" };
		o.removeAttr("max-options").attr("max-options", 1);
	}
	
	var i = 0;
	for (var k in options) {
		i++;
		var opn = n + "_" + i;
		
		var op = $("<span class=\"edit-option\" value=\"\" onclick=\"void(0);\"></span>");
		op.attr("value", k);
		op.attr("name", opn);
		op.addClass("unselectable");
		op.html(options[k]);
		
		if(o.hasClass("yesno")) {
			if(k=="1"){ op.addClass("yes");	} else {op.addClass("no");}
		}
		
		if(Array.isArray(v)){
			
		}else if(v == k){
			op.addClass("active");
		}
		o.append(op);
	}
	
	var fno = function(p,e){
		var out = [];
		p.find(".edit-option.active").each(function(){out.push($(this).attr("value"));});
		p.elmKey("value", out.join(","));
		
		var rvalue = false;
		rea_controller.dispatchEvent("uiw_event", {"action": "change","name": n, "event": e, "node": p, "rvalue":rvalue} );
	}
	var fn = function(e){
		var o = $(e.target);
		if(!o.hasClass("edit-option")) return;
		
		var p = o.closest(".ui_options");
		if(p.hasClass("disabled")) return;
		
		if(o.hasClass("active")){
			o.removeClass("active");
			fno(p,e);
			return;
		}
		
		if(p.attr("max-options")){
			var mc = p.attr("max-options");
			if(mc == 1){
				p.find(".edit-option.active").each(function(){$(this).removeClass("active");});
			}else{
				var c = p.find(".edit-option.active").length;
				if(c+1>mc) return;
			}
		}
		
		o.addClass("active");
		
		fno(p,e);
		
		
	}
	
	o.on("click", fn);
}

///@ui_select

ui_widgets.ui_select = new ui_widget("ui_select");
ui_widgets.ui_select.initWithElement = function(o){
	this.init(o);
};
ui_widgets.ui_select.setAttr = function(a, v){
	
	if(a == "ro"){
		if(v=="1"){
			this.o.addClass("disabled");
			this.o.attr("disabled", "disabled");
		}else if(this.o.attr("disabled")){
			this.o.removeClass("disabled");
			this.o.removeAttr("disabled");
		}
	}
	if(a == "title"){
		this.o.elmKey("o-title", v);
		this.o.attr("title", v);
	}
	if(a == "placeholder"){
		this.o.attr("placeholder", v);	
	}
}
ui_widgets.ui_select.getValue = function(){
	return this.o.val();
}
ui_widgets.ui_select.setValue = function(value){
	this.o.elmKey("value", value);
	this.o.val(value);
}
ui_widgets.ui_select.setOptions = function(options){	
	var sc = (this.o.attr("data-with-code") && (this.o.attr("data-with-code") == "1") ) ? 1: 0;
	var v = this.o.val();
	if(!v){
		v = this.o.elmKey('value');
	}
	
	this.o.find("option").remove();
	
	var keys = Object.keys(options);
	for(var i=0; i<keys.length; i++){
		var k = keys[i];
		var caption = options[k];
		var selected = (v == k) ? ' selected ' : '';
		if (sc) caption = "(" + k + ") " + caption;
		var s = "<option value='" + k + "'" + selected + "> " + caption + "</option>";
		this.o.append(s);
	}
}
ui_widgets.ui_select.setOptionsWithDS = function(ds){
	//console.log("@ui_select.setOptionsWithDS()");
	if( (typeof ds != "object") || (!ds.hasOwnProperty("items")) ) return;
	if(!ds.items.hasOwnProperty("options")) return;
	
	this.setOptions(ds.items.options);
}
ui_widgets.ui_select.register = function(){
	return {
		"provide-expand": ["div.select"],
		"privide-data": true,
		"expand-needs": ["ui_table"],
	};
}
ui_widgets.ui_select.expandElement = function(o){
	var n = o.attr("name");
	var v = '';
	
	
	if(o.attr("extended") ) return;
	if(o.data("ignore") && (o.data("ignore") == "1")) return;
	
	if (o.hasClass('multiple')) {
		in_type = "select multiple";
	}
	
	if (o.attr("default")) {
		v = o.attr("default");
	}
	
	var m_options = {};
	
	if (o.attr("options")) {
		var ops = JSON.parse(o.attr("options"));
		for (var k in ops) {
			
			m_options[k] = ops[k];
		}
	}else if (o.attr("datasource")) {
		
	}
	
	var d = o;
	if( o.elmType() != "select" ){
		d = $('<select class="field" name="' + n + '"></select>');
		if (o.attr('data-with-code')) d.attr('data-with-code', o.attr('data-with-code'));
	}
	
	d.removeClass("select");
	
	d.addClass("uiw").addClass("ui_select");
	d.elmKey("uiw", "ui_select");
	
	var wg = ui_widgets.ui_select.instanceWithElement(d);
	
	d.attr('default', v);
	d.attr("extended", 1);

	
	wg.setOptions(m_options);
	
	
	if( o.attr("datasource") && ( o.elmType() != "select" ) ){
		
		var dsn = o.attr("datasource");
		
		var ds = ui_datasource_controller.getDatsourceWithName(dsn);
		
		if( (typeof ds != "undefined") && (ds.ready) ){
			wg.setOptionsWithDS(ds);
		}
		
		var fn = function(ds){
			wg.setOptionsWithDS(ds);
		};
		
		rea_controller.on("ds_changed_" + dsn, fn);
		d.elmKey("ds", o.attr("datasource"));
		o.removeAttr("datasource");
		
	}
	
	if( o.attr("scope") ) { d.elmKey("scope", o.attr("scope")); }
	
	wg.installEvents();

	if( o.elmType() != "select" ){
		o.replaceWith( d );	
	}
}
///@ui_date

ui_widgets.ui_table = new ui_widget("ui_table");
ui_widgets.ui_table.initWithElement = function(o){
	this.init(o);
};

ui_widgets.ui_table.setAttr = function(a, v){
	
	if(a == "ro"){
		if(v=="1"){
			this.o.attr("disabled", "disabled");
		}else if(this.o.attr("disabled")){
			this.o.removeAttr("disabled");
		}
	}
	if(a == "title"){
		this.o.elmKey("o-title", v);
		if(!this.o.attr("title")) this.o.attr("title", v);
	}
	if(a == "placeholder"){
		this.o.attr("placeholder", v);	
	}
}
ui_widgets.ui_table.getValue = function(){
	
	var v = this.o.val();
	var d = rea.types.date.create(v);
	var val = {};
	var n = this.o.elmName();
	
	if(v.length > 0) {
		val["multiple"] = true;
		val["record_type"] = "date";
		val["value"] = d.dateToHumanString();
		val["utc"] = d.toUTCString();
		val["iso"] = d.toISOString();
		val["json"] = d.toJSON();
		val["epoch"] = d.epoch();
		val["mysql"] = d.toMYSQLDateTime();
	
	}else{
		val = null;
	}
	
	return val;
}
ui_widgets.ui_table.setValue = function(value){
	
	var v = '';
	var ty = (typeof value);
	
	if( (ty == "string") ) {
		v = value;
	}
	var d = null;
	
	if( value instanceof Date){
		d = value;
	}else if(typeof value == "string"){
		d = rea.types.date.create(value);
	}
	
	if(!d) return;

	v = (d.getMonth()+1) + '/' + d.getDate() + '/' + d.getFullYear();
	this.o.attr("title", o.data("o-title") + "; Value " + v);
	
	this.o.elmKey("date", v);
	
	this.o.val(value);
}

ui_widgets.ui_table.register = function(){
	ui_widgets.ui_table.initHooks();
	
	return {
		"provide-expand": ["table.table"],
		"privide-data": true,
		"expand-needs": null,
	};
}
ui_widgets.ui_table.initHooks = function(){
	$(document).on('click touchstart','.repeater-cmd-add', function(e){
		e.preventDefault();
		e.stopPropagation();
		
		var o = $(e.target);
		var tbl = o.parents(".table");
		var atr = tbl.data('template');
		var n = tbl.attr("name");
		
		var tb = tbl.find('tbody');
		var ltr = tb.find('tr:last-child');
		var k = 1;
		if (ltr.length > 0) {
			k = (ltr.data('key') * 1) + 1;
		}
		
		var scope = "default";
		if( tbl.elmHasKey("scope") ) { scope = tbl.elmKey("scope"); }

		
		var tds = atr.find('td');
		var tr = $("<tr data-owner='" + n + "' data-key='" + k + "' data-row-added='1'></tr>");
		tds.each( function() {
			var td = $(this).clone(true, true);
			var html = td.html();
			var css = (td.attr('class')) ? td.attr('class') : '';
			html = html.replace(/\%[A-Z|a-z|0-9|\_|\-]*\%/, '');
			css = css.replace(/\%[A-Z|a-z|0-9|\_|\-]*\%/, '');
			
			td.attr('class', css);
			td.html(html);
			td.data('owner', n).elmKey('key', k);
			
			tr.append(td);
		});
		ui_widgets.expandForSelector(tr);
		tr.elmKey("row-added", 1);
		
		tb.append(tr);
		
	});
	
	$(document).on('click touchstart','.repeater-cmd-del', function(e){
		e.preventDefault();
		e.stopPropagation();
		
		var o = $(e.target);
		var tbl = o.parents(".table");
		var atr = tbl.data('template');
		var n = tbl.attr("name");
		
		var tr = o.closest("tr");
		tr.elmKey("row-deleted", 1);
		tr.hide();
	});
}
ui_widgets.ui_table.expandRow = function(row, sel){
	row.find(sel).each(function(){
		var td = $(this);
		if(td.attr("size")){
			td.css({"width":td.attr("size")});
			td.removeAttr("size");
		}
		if(td.attr("max-size")){
			td.css({"max-width":td.attr("max-size")});
			td.removeAttr("max-size");
		}
	});
}
ui_widgets.ui_table.expandElement = function(tbl){
	if(tbl.elmKey("expanded")) return;
	
	var n = tbl.attr("name");
	var scope = "default";
	if( tbl.attr("scope") ) { scope = tbl.attr("scope"); tbl.removeAttr("scope"); tbl.elmKey("scope", scope); }

	var atr = tbl.find('tr.table-row-template');
	
	this.expandRow(atr,"td");
	this.expandRow(tbl,"th");
	
	tbl.data('template', atr);
	atr.remove();
	
	tbl.addClass("uiw").addClass("uiwc").elmKey("uiw", "ui_table");
	tbl.addClass("uiwc-for-table-rows");
	tbl.addClass("uiwd-table-rows");
	
	if (tbl.attr("datasource1")) {
		var ds_name = tbl.attr("datasource");
		var ds = window[ds_name];
		
		var v = (tbl.attr("default")) ? tbl.attr("default") : '';
		ds.get( function(ds){
			console.log("on tbl get");
			//rea_helper_ui_table.populateWithDS(tbl, ds);
			
		});
		
		if (ds.def.source_pull=='dynamic') {
			tbl.attr("data-source-update-on-change", tbl.attr("datasource"));
		}
	}
	
	//var ops = o.find('tr.template');
	
	ui_support.applyStandardRowSizeAttr(tbl,tbl);
	
	var m = $("<span></span>");
	tbl.before(m);
	tbl.detach();
	var dw = $("<div class='table-wrapper'></div>");
	dw.append(tbl);
	
	if(tbl.hasClass("size-fixed")) {
		dw.addClass("size-fixed");
	}
	
	m.replaceWith(dw);	
}
///@ui_hidden

ui_widgets.ui_hidden = new ui_widget("ui_hidden");
ui_widgets.ui_hidden.initWithElement = function(o){
	this.init(o);
};
ui_widgets.ui_hidden.getValue = function(){
	if( this.o.attr('data-ignore') && (this.o.data('ignore')=='1')) return null;
	return this.o.val();
}
ui_widgets.ui_hidden.setValue = function(value){
	this.o.val(value);
}
ui_widgets.ui_hidden.register = function(){
	return {
		"provide-expand": ["input[type=hidden]","input.hidden"],
		"privide-data": true,
		"expand-needs": null,
	};
}
ui_widgets.ui_hidden.expandElement = function(o){
	var n = o.attr("name");

	var scope = "default";
	if(o.elmKey("expanded")) return;
	

	if( o.attr("scope") ) { scope = o.attr("scope"); o.removeAttr("scope"); }

	o.addClass("uiw").addClass("hidden").addClass("ui_hidden");
	
	if(o.hasClass("hidden")){
		o.attr("type", "hidden");
	}
	
	o.elmKey("uiw", "ui_hidden");
	if(scope != "default") o.elmKey("scope", scope);
	
	
}

///@ui_textbox
ui_widgets.ui_textbox = new ui_widget("ui_textbox");
ui_widgets.ui_textbox.initWithElement = function(o){
	this.init(o);
};
ui_widgets.ui_textbox.setAttr = function(a, v){
	
	if(a == "ro"){
		if(v=="1"){
			this.o.addClass("disabled");
			this.o.attr("disabled", "disabled");
		}else if(this.o.attr("disabled")){
			this.o.removeClass("disabled");
			this.o.removeAttr("disabled");
		}
	}
	if(a == "title"){
		this.o.elmKey("o-title", v);
		this.o.attr("title", v);
	}
	if(a == "placeholder"){
		this.o.attr("placeholder", v);	
	}
}
ui_widgets.ui_textbox.getValue = function(){
	if( this.o.attr('data-ignore') && (this.o.data('ignore')=='1')) return null;
	return this.o.val();
}
ui_widgets.ui_textbox.setValue = function(value){
	this.o.elmKey("value", value);
	this.o.val(value);
}


ui_widgets.ui_textbox.register = function(){
	return {
		"provide-expand": ["input.field"], //array with selectors I can expand
		"privide-data": true, //bool indicating if this widget provides data
		"expand-needs": ["ui_table"], //array of widgets I need before we expand
	};
}
ui_widgets.ui_textbox.expandElement = function(o){
	//console.log("@ui.checkbox.uiExpandTextBox()");			
	var n = o.attr("name");

	if(o.data("ignore") && (o.data("ignore") == "1")) return;
	
	var scope = "default";
	if( o.attr("scope") ) { scope = o.attr("scope"); o.removeAttr("scope"); }


	o.addClass("field");
	
	if(o.hasClass("email")){
		o.attr("type", "email");
	}else if(o.hasClass("password")){
		o.attr("type", "password");
	}else{
		o.attr("type", "text");
	}
	
	
	o.addClass("uiw");
	o.addClass("ui_textbox");
	o.elmKey("uiw", "ui_textbox");
	o.attr("extended", 1);
	
	if(scope != "default") o.elmKey("scope", scope);
	
	
	var wg = ui_widgets.ui_textbox.instanceWithElement(o);
	wg.installEvents();
}

///@ui_toggle

ui_widgets.ui_toggle = new ui_widget("ui_toggle");
ui_widgets.ui_toggle.initWithElement = function(o){
	this.init(o);	
	var $this = this;
	var t = this.o.find(".edit-area");
	
}
ui_widgets.ui_toggle.setAttr = function(a, v){
	
	if(a == "ro"){
		if(v=="1"){
			this.o.addClass("disabled");
		}else if(this.o.attr("disabled")){
			this.o.removeClass("disabled");
		}
	}
	if(a == "title"){
		this.o.elmKey("o-title", v);
		this.o.attr("title", v);
	}
	if(a == "placeholder"){
		this.o.attr("placeholder", v);	
	}
}
ui_widgets.ui_toggle.getValue = function(){
	return this.o.elmKey("value");
}
ui_widgets.ui_toggle.setValue = function(value){
	var v = 0;
	v = (value) ? 1: 0;

	var tz = '0';
	if(v){
		this.o.removeClass("active");
		v = "0";
	}else{
		this.o.addClass("active");
		v = "1";
		tz = '44';
	}
	
	this.o.find(".toggle-handle").css({"transform": "translate3d(" + tz + "px, 0px, 0px)"} );
	this.o.elmKey("value", v);
}	
ui_widgets.ui_toggle.register = function(){
	return {
		"provide-expand": ["div.toggle"],
		"privide-data": true,
		"expand-needs": ["ui_table"],
	};
}
ui_widgets.ui_toggle.expandElement = function(o){
	var v = 0;
	var n = o.elmName();
	
	var scope = "default";
	if( o.attr("scope") ) { scope = o.attr("scope"); o.removeAttr("scope"); }
	
	if (o.attr("default")) {
		v = o.attr("default");
	}
	
	
	o.addClass("field").addClass("ui_toggle").addClass("uiw");
	o.elmKey("uiw", "ui_toggle");
	o.attr("extended", 1);
	
	var tz = '0';
	if(v == "1"){
		o.addClass("active");
		tz = '44';
	}
	
	o.elmKey("value", v);
	var th = $("<div class=\"toggle-handle\" style=\"transform: translate3d(" + tz + "px, 0px, 0px);\"></div>");
	
	o.append(th);
		
	
	var fn = function(e){
		var o = $(e.target);
		if(!o.hasClass("toggle")) o = o.closest(".toggle");
		
		
		var v = (o.elmKey("value")=="1") ? 1 : 0;
		
		var tz = '0';
		if(v){
			o.removeClass("active");
			v = "0";
		}else{
			o.addClass("active");
			v = "1";
			tz = '44';
		}
		
		o.find(".toggle-handle").css({"transform": "translate3d(" + tz + "px, 0px, 0px)"} );
		o.elmKey("value", v);
		
		var rvalue = false;
		rea_controller.dispatchEvent("uiw_event", {"action": "change","name": n, "event": e, "node": o, "rvalue":rvalue} );
	}
	
	o.on("click", fn);
}